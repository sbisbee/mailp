#!/bin/bash
# Copyright 2010 Sam Bisbee
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

send()
{
  grep "^$to" "$pendingFile" > /dev/null && return

  key=`echo "$to$RANDOM" | openssl dgst -sha1`

  echo "DO NOT DELETE THIS E-MAIL - it is used to make sure your e-mail is
working. Once done, this e-mail will be deleted automatically.

--
Your friendly mailp script" | mail -s "mailp test" --append="X-MAILP: $key" --append="From: $from" $to

  [[ $? -ne 0 ]] && { echo "Mail was not sent successfuly"; exit 1; }

  setPendingRecord $to $key 0
}

processPending()
{
  while read email key count
  do
    # this was faster than grep/awk combo
    [[ "$email" != "$to" ]] && continue

    if [ -z $mboxOut ]
    then
      mailp_deleteMessage "$mbox" "x-mailp" "$key" "to" ".*$email.*"
      res=$?
    else
      lockBox $mboxOut
      mailp_deleteMessage "$mbox" "x-mailp" "$key" "to" ".*$email.*" > "$mboxOut"
      res=$?
      unlockBox $mboxOut
    fi

    if [ "$res" == "1" ]
    then
      # Not found.
      ((count++))
      setPendingRecord $email $key $count
      [[ $count -ge $maxTries ]] && failed $email 
    else
      deletePendingRecord $1 $2
    fi
  done < "$pendingFile"
}

setPendingRecord()
{
  #args: email key count

  deletePendingRecord $1 $2
  echo "$1 $2 $3" >> "$pendingFile"
}

deletePendingRecord()
{
  #args: email hash

  sed -i -e "/^$1 $2/d" "$pendingFile"
}

failed()
{
  [[ -n "$toExecute" ]] && $toExecute
}

lockBox()
{
  # args: mbox

  if [[ `which mutt_dotlock` ]]
  then 
    mutt_dotlock "$1" || { echo "Error: couldn't get a lock on $1 with mutt_dotlock."; exit 1; }
  else 
    # Doesn't look like there's a native lock system, so we use our own
    # primitive one.

    sleepTime=10 #how many seconds to wait for a lock

    for (( i=0; i < sleepTime; i++ ))
    do
      [[ ! -f "$1.lock" ]] && { touch "$1.lock"; return; }
      sleep 1
    done    

    #would have returned in loop on success, so we failed
    echo "Error: couldn't get a lock on $1 with mailp's locking function."
    exit 1
  fi 
}

unlockBox()
{
  #args: mbox

  rm -f "$1.lock" || echo "Unable to unlock $1 - you'll have to remove the lock manually."
}

usage()
{
  echo -e "$0 -f <from email> -t <to email> -m <mbox file> [-o <output mbox
file>] [-p <pending e-mails file>] [-c <max times to try an e-mail>] [-e
<command to run on failure>]

WARNING: This program is still in development, so be careful when running it
against your mbox file.  
" 
}

from='';
to='';
mbox='';
mboxOut='';
pendingFile='/tmp/mailp-pending'
maxTries=5
toExecute=''

while getopts "hf:t:m:p:o:c:e:" options
do
  case "$options" in
    f ) from="$OPTARG" ;;

    t ) to="$OPTARG" ;;

    m ) mbox="$OPTARG" ;;

    p ) pendingFile="$OPTARG" ;;

    o ) mboxOut="$OPTARG" ;;

    c ) maxTries="$OPTARG" ;;

    e ) toExecute="$OPTARG" ;;

    h ) usage; exit 0 ;;

    \? ) usage; exit 1 ;;
    * ) usage; exit 1 ;;
  esac
done

[[ $maxTries -lt 0 ]] && { echo "Error: invalid value for maxTries (-c)."; exit 1; }

if [ -n "$mboxOut" ]
then
  [[ ! -f "$mboxOut" && -e "$mboxOut" ]] && { echo "Error: $mboxOut is not a valid mbox file."; exit 1; }

  [[ ! -w "$mboxOut" ]] && { echo "Error: output mbox exists, but isn't writable."; exit 1; }
fi

[[ -z "$from" || -z "$to" || -z "$mbox" || -z "$pendingFile" ]] && { echo "Error: invalid args"; usage; exit 1; }

[[ ! -f "$pendingFile" ]] && touch "$pendingFile"
[[ ! -w "$pendingFile" ]] && { echo "Error: couldn't read pendingFile"; usage; exit 1; }

processPending
send
