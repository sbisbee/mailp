#!/bin/bash
# Copyright 2010 Sam Bisbee
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

send()
{
  grep "$to" "$pendingFile" > /dev/null && return

  key=`echo "$to$RANDOM" | openssl dgst -sha1`

  echo "DO NOT DELETE THIS E-MAIL - it is used to make sure your e-mail is
working. Once done, this e-mail will be deleted automatically.

--
Your friendly mailp script" | mail -s "mailp test" --append="X-MAILP: $key" --append="From: $from" $to

  [[ $? -ne 0 ]] && { echo "Mail was not sent successfuly"; exit 1; }

  echo "$to $key" >> "$pendingFile"
}

processPending()
{
  while read email key
  do
    lockBox
    tmpMbox=`mktemp`
    ./deleteMessage.plx "$mbox" "x-mailp" "$key" "to" ".*$email.*" > "$tmpMbox" || { echo "Error: failed to process the mbox"; exit 1; }
    mv "$tmpMbox" "$mbox" 
    unlockBox
    sed -i -e "/$key/d" "$pendingFile"
  done < "$pendingFile"
}

lockBox()
{
  if [[ `which mutt_dotlock` ]]
  then 
    mutt_dotlock "$mbox" || { echo "Error: couldn't get a lock on the mbox with mutt_dotlock."; exit 1; }
  else 
    # Doesn't look like there's a native lock system, so we use our own
    # primitive one.

    sleepTime=10 #how many seconds to wait for a lock

    for (( i=0; i < sleepTime; i++ ))
    do
      [[ ! -f "$mbox.lock" ]] && { touch "$mbox.lock"; return; }
      sleep 1
    done    

    #would have returned in loop on success, so we failed
    echo "Error: couldn't get a lock on the mbox."
    exit 1
  fi 
}

unlockBox()
{
  rm -f "$mbox.lock"
}

usage()
{
  echo "$0 -f <from email> -t <to email> -m <mbox file> [-p <pendingFile]"
}

from='';
to='';
mbox='';
pendingFile='/tmp/mailp-pending'

while getopts "hf:t:m:p:" options
do
  case "$options" in
    f ) from="$OPTARG" ;;
    t ) to="$OPTARG" ;;
    m ) mbox="$OPTARG" ;;
    p ) pendingFile="$OPTARG" ;;
    h ) usage; exit 0 ;;
  esac
done

[[ -z "$from" || -z "$to" || -z "$mbox" || -z "$pendingFile" ]] && { echo "Error: invalid args"; usage; exit 1; }

[[ ! -f "$pendingFile" ]] && touch "$pendingFile"
[[ ! -w "$pendingFile" ]] && { echo "Error: couldn't read pendingFile"; usage; exit 1; }

processPending
send
